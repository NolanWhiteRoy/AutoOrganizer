/*
 * Programmer: Nolan White-Roy 
 * Date Completed: Thursday, May 28, 2020
 * Description: Users can add, edit and remove cars from inventory. The dealership's 
 * inventory can be easily managed and navigated using each product's unique stock number.
 * The inventory can also be browsed using a variety of sorting operators relevant to the 
 * buyers preferences. This not only helps to ensure the inventory is organized but also 
 * to optimize the customer service experience. The entire program features an advanced 
 * data validation process that ensures a low error rate. 
 */

/*
 *
 * @author Nolan
 */
import java.util.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.io.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

public class AutoOrganizerUI extends javax.swing.JFrame {

    // Global Variable Decleration. 
    
    // Lists to fill combo boxes. 
    ArrayList<String> MakeList = new ArrayList<>();
    ArrayList<String> ModelList = new ArrayList<>();

    // Stock# arrayList to find index in cars. 
    ArrayList<Integer> StockNumberList = new ArrayList();

    
    ArrayList<car> cars = new ArrayList();
    ArrayList<Integer> stock = new ArrayList();
    Integer selected = 0;
    Boolean edit = false;

    public AutoOrganizerUI() {
        initComponents();

        // Open program to vehicle search screen. 
        homeButton.setVisible(false);
        
        // Open to vehicle search Screen.
        parentPanel.removeAll();
        parentPanel.add(vehicleSearchPanel);
        
        // Resizes the frame to look pretty.
        setSize(800, 670); 
        
        creationErrorLabel.setText(""); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OptionsPanel = new javax.swing.JPanel();
        homeButton = new javax.swing.JButton();
        adminButton = new javax.swing.JButton();
        TitlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        SubTitleLabel = new javax.swing.JLabel();
        parentPanel = new javax.swing.JPanel();
        generalPanel = new javax.swing.JPanel();
        vehicleSearchPanel = new javax.swing.JPanel();
        searchInventoryPanel = new javax.swing.JPanel();
        vehicleTypeComboBox = new javax.swing.JComboBox<>();
        modelComboBox = new javax.swing.JComboBox<>();
        makeComboBox = new javax.swing.JComboBox<>();
        transmissionComboBox = new javax.swing.JComboBox<>();
        kilometersLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        searchOneButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        kilometersMinInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        kilometersMaxInput = new javax.swing.JTextField();
        priceRangeMinInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        vehicleYearMaxInput = new javax.swing.JTextField();
        vehicleYearMinInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        priceRangeMaxInput = new javax.swing.JTextField();
        conditionComboBox = new javax.swing.JComboBox<>();
        conditionSort = new javax.swing.JRadioButton();
        typeSort = new javax.swing.JRadioButton();
        modelSort = new javax.swing.JRadioButton();
        makeSort = new javax.swing.JRadioButton();
        transmissionSort = new javax.swing.JRadioButton();
        kilometerSort = new javax.swing.JRadioButton();
        yearSort = new javax.swing.JRadioButton();
        priceSort = new javax.swing.JRadioButton();
        stockNumberSearchTextField = new javax.swing.JTextField();
        searchTwoButton = new javax.swing.JButton();
        inventoryManagementPanel1 = new javax.swing.JPanel();
        allInventoryButton = new javax.swing.JButton();
        selectedInventoryButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        addVehicleButton = new javax.swing.JButton();
        searchInput = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        inventoryErrorLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        inventoryOutput = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        searchOutput = new javax.swing.JTextArea();
        vehicleCreationPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        vehicleCreateLabel = new javax.swing.JLabel();
        conditionCreateLabel = new javax.swing.JLabel();
        conditionInput = new javax.swing.JComboBox<>();
        typeCreateLabel = new javax.swing.JLabel();
        typeInput = new javax.swing.JComboBox<>();
        transmissionCreateLabel = new javax.swing.JLabel();
        transmissionInput = new javax.swing.JComboBox<>();
        modelCreateLabel = new javax.swing.JLabel();
        modelInput = new javax.swing.JTextField();
        makeCreateLabel = new javax.swing.JLabel();
        makeInput = new javax.swing.JTextField();
        kilometreCreateLabel = new javax.swing.JLabel();
        kilometreInput = new javax.swing.JTextField();
        priceCreateLabel = new javax.swing.JLabel();
        priceInput = new javax.swing.JTextField();
        vinCreateLabel = new javax.swing.JLabel();
        vinInput = new javax.swing.JTextField();
        locationCreateLabel = new javax.swing.JLabel();
        locationInput = new javax.swing.JTextField();
        confirmVehicleCreation = new javax.swing.JButton();
        yearCreateLabel = new javax.swing.JLabel();
        yearInput = new javax.swing.JTextField();
        cancelVehicleCreation = new javax.swing.JButton();
        creationErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(800, 2000));

        OptionsPanel.setBackground(new java.awt.Color(255, 255, 255));

        homeButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        adminButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        adminButton.setText("Admin");
        adminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminButtonActionPerformed(evt);
            }
        });

        TitlePanel.setBackground(new java.awt.Color(102, 102, 102));

        titleLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Auto Organizer");

        javax.swing.GroupLayout TitlePanelLayout = new javax.swing.GroupLayout(TitlePanel);
        TitlePanel.setLayout(TitlePanelLayout);
        TitlePanelLayout.setHorizontalGroup(
            TitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TitlePanelLayout.setVerticalGroup(
            TitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SubTitleLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 24)); // NOI18N
        SubTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SubTitleLabel.setText("Vehicle Search");

        javax.swing.GroupLayout OptionsPanelLayout = new javax.swing.GroupLayout(OptionsPanel);
        OptionsPanel.setLayout(OptionsPanelLayout);
        OptionsPanelLayout.setHorizontalGroup(
            OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(homeButton)
                .addGap(55, 55, 55)
                .addComponent(SubTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                .addGap(51, 51, 51)
                .addComponent(adminButton)
                .addGap(18, 18, 18))
            .addComponent(TitlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        OptionsPanelLayout.setVerticalGroup(
            OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsPanelLayout.createSequentialGroup()
                .addComponent(TitlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeButton)
                    .addComponent(SubTitleLabel)
                    .addComponent(adminButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(OptionsPanel, java.awt.BorderLayout.PAGE_START);

        parentPanel.setBackground(new java.awt.Color(0, 153, 255));
        parentPanel.setLayout(new java.awt.CardLayout());

        generalPanel.setBackground(new java.awt.Color(255, 255, 255));
        generalPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        vehicleSearchPanel.setBackground(new java.awt.Color(255, 255, 255));
        vehicleSearchPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        searchInventoryPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchInventoryPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        vehicleTypeComboBox.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        vehicleTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Car", "SUV", "Truck", "Van" }));

        modelComboBox.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        makeComboBox.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        transmissionComboBox.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        transmissionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual", "Automatic" }));

        kilometersLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        kilometersLabel.setText("Kilometers:");

        yearLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        yearLabel.setText("Vehicle Year");

        priceLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        priceLabel.setText("Price Range");

        searchOneButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        searchOneButton.setText("Search");
        searchOneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchOneButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        kilometersMinInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        kilometersMinInput.setText("from");
        kilometersMinInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kilometersMinInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                kilometersMinInputFocusLost(evt);
            }
        });

        jLabel1.setText("-");

        kilometersMaxInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        kilometersMaxInput.setText("to");
        kilometersMaxInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                kilometersMaxInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                kilometersMaxInputFocusLost(evt);
            }
        });

        priceRangeMinInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        priceRangeMinInput.setText("from");
        priceRangeMinInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceRangeMinInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceRangeMinInputFocusLost(evt);
            }
        });

        jLabel2.setText("-");

        vehicleYearMaxInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        vehicleYearMaxInput.setText("to");
        vehicleYearMaxInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vehicleYearMaxInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                vehicleYearMaxInputFocusLost(evt);
            }
        });

        vehicleYearMinInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        vehicleYearMinInput.setText("from");
        vehicleYearMinInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vehicleYearMinInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                vehicleYearMinInputFocusLost(evt);
            }
        });

        jLabel3.setText("-");

        priceRangeMaxInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        priceRangeMaxInput.setText("to");
        priceRangeMaxInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceRangeMaxInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceRangeMaxInputFocusLost(evt);
            }
        });

        conditionComboBox.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        conditionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "New", "Used" }));

        conditionSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        conditionSort.setText("Select Condition");
        conditionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conditionSortActionPerformed(evt);
            }
        });

        typeSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        typeSort.setText("Select Type");
        typeSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeSortActionPerformed(evt);
            }
        });

        modelSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        modelSort.setText("Select Model");
        modelSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelSortActionPerformed(evt);
            }
        });

        makeSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        makeSort.setText("Select Make");
        makeSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeSortActionPerformed(evt);
            }
        });

        transmissionSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        transmissionSort.setText("Select Transmission");
        transmissionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transmissionSortActionPerformed(evt);
            }
        });

        kilometerSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        kilometerSort.setText("Select Kilometers");
        kilometerSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kilometerSortActionPerformed(evt);
            }
        });

        yearSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        yearSort.setText("Select Year");
        yearSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearSortActionPerformed(evt);
            }
        });

        priceSort.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        priceSort.setText("Select Price");
        priceSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchInventoryPanelLayout = new javax.swing.GroupLayout(searchInventoryPanel);
        searchInventoryPanel.setLayout(searchInventoryPanelLayout);
        searchInventoryPanelLayout.setHorizontalGroup(
            searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(kilometersLabel)
                            .addComponent(kilometersMinInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 20, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(kilometersMaxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(modelComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(makeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transmissionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(vehicleTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchOneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                                        .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(yearLabel)
                                            .addComponent(priceLabel))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                                        .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                                                .addComponent(priceRangeMinInput, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel3))
                                            .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                                                .addComponent(vehicleYearMinInput, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2)))
                                        .addGap(18, 18, 18)
                                        .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(priceRangeMaxInput, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                            .addComponent(vehicleYearMaxInput)))))
                            .addComponent(conditionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conditionSort)
                    .addComponent(typeSort)
                    .addComponent(modelSort)
                    .addComponent(makeSort)
                    .addComponent(transmissionSort)
                    .addComponent(kilometerSort)
                    .addComponent(yearSort)
                    .addComponent(priceSort))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        searchInventoryPanelLayout.setVerticalGroup(
            searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchInventoryPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(conditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conditionSort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vehicleTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeSort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelSort))
                .addGap(18, 18, 18)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(makeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(makeSort))
                .addGap(18, 18, 18)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transmissionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transmissionSort))
                .addGap(12, 12, 12)
                .addComponent(kilometersLabel)
                .addGap(18, 18, 18)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kilometersMinInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(kilometersMaxInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kilometerSort))
                .addGap(16, 16, 16)
                .addComponent(yearLabel)
                .addGap(18, 18, 18)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vehicleYearMinInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vehicleYearMaxInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(yearSort))
                .addGap(18, 18, 18)
                .addComponent(priceLabel)
                .addGap(18, 18, 18)
                .addGroup(searchInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceRangeMinInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(priceRangeMaxInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceSort))
                .addGap(18, 18, 18)
                .addComponent(searchOneButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        stockNumberSearchTextField.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        stockNumberSearchTextField.setText("Stock #");
        stockNumberSearchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                stockNumberSearchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                stockNumberSearchTextFieldFocusLost(evt);
            }
        });
        stockNumberSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockNumberSearchTextFieldActionPerformed(evt);
            }
        });

        searchTwoButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        searchTwoButton.setText("Search");
        searchTwoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTwoButtonActionPerformed(evt);
            }
        });

        inventoryManagementPanel1.setBackground(new java.awt.Color(255, 255, 255));
        inventoryManagementPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        inventoryManagementPanel1.setPreferredSize(new java.awt.Dimension(722, 565));

        allInventoryButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        allInventoryButton.setText("All inventory Report");
        allInventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allInventoryButtonActionPerformed(evt);
            }
        });

        selectedInventoryButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        selectedInventoryButton.setText("Selected Item Report");
        selectedInventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedInventoryButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        removeButton.setText("Remove Searched Product");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        editButton.setText("Edit Searched Product");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        addVehicleButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        addVehicleButton.setText("Add Product");
        addVehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVehicleButtonActionPerformed(evt);
            }
        });

        searchInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        searchInput.setText("Stock #");
        searchInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchInputFocusLost(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        inventoryErrorLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inventoryErrorLabel.setForeground(new java.awt.Color(255, 0, 51));
        inventoryErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        inventoryOutput.setEditable(false);
        inventoryOutput.setColumns(20);
        inventoryOutput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        inventoryOutput.setRows(5);
        jScrollPane5.setViewportView(inventoryOutput);

        javax.swing.GroupLayout inventoryManagementPanel1Layout = new javax.swing.GroupLayout(inventoryManagementPanel1);
        inventoryManagementPanel1.setLayout(inventoryManagementPanel1Layout);
        inventoryManagementPanel1Layout.setHorizontalGroup(
            inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryManagementPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectedInventoryButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(allInventoryButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addVehicleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(inventoryManagementPanel1Layout.createSequentialGroup()
                        .addComponent(searchInput)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton)))
                .addGap(20, 20, 20))
            .addComponent(inventoryErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        inventoryManagementPanel1Layout.setVerticalGroup(
            inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryManagementPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addGroup(inventoryManagementPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inventoryManagementPanel1Layout.createSequentialGroup()
                        .addComponent(addVehicleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addGap(40, 40, 40)
                        .addComponent(selectedInventoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allInventoryButton)
                        .addGap(0, 281, Short.MAX_VALUE))
                    .addGroup(inventoryManagementPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inventoryErrorLabel)))
                .addContainerGap())
        );

        searchOutput.setEditable(false);
        searchOutput.setColumns(20);
        searchOutput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        searchOutput.setRows(5);
        jScrollPane3.setViewportView(searchOutput);

        javax.swing.GroupLayout vehicleSearchPanelLayout = new javax.swing.GroupLayout(vehicleSearchPanel);
        vehicleSearchPanel.setLayout(vehicleSearchPanelLayout);
        vehicleSearchPanelLayout.setHorizontalGroup(
            vehicleSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehicleSearchPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(searchInventoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(vehicleSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vehicleSearchPanelLayout.createSequentialGroup()
                        .addComponent(stockNumberSearchTextField)
                        .addGap(18, 18, 18)
                        .addComponent(searchTwoButton))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(99, Short.MAX_VALUE))
            .addComponent(inventoryManagementPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE)
        );
        vehicleSearchPanelLayout.setVerticalGroup(
            vehicleSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehicleSearchPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(vehicleSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(vehicleSearchPanelLayout.createSequentialGroup()
                        .addGroup(vehicleSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stockNumberSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTwoButton))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchInventoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addComponent(inventoryManagementPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        vehicleCreationPanel.setBackground(new java.awt.Color(255, 255, 255));
        vehicleCreationPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        vehicleCreationPanel.setPreferredSize(new java.awt.Dimension(722, 565));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        vehicleCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        vehicleCreateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vehicleCreateLabel.setText("Please Enter Vehicle Information");

        conditionCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        conditionCreateLabel.setText("Condition");

        conditionInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        conditionInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "New", "Used" }));

        typeCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        typeCreateLabel.setText("Vehicle Type");

        typeInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        typeInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Car", "SUV", "Truck", "Van" }));

        transmissionCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        transmissionCreateLabel.setText("Transmission");

        transmissionInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        transmissionInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual", "Automatic" }));

        modelCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        modelCreateLabel.setText("Model");

        modelInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        makeCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        makeCreateLabel.setText("Make");

        makeInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        kilometreCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        kilometreCreateLabel.setText("Kilometres");

        kilometreInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        priceCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        priceCreateLabel.setText("Price");

        priceInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        vinCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        vinCreateLabel.setText("VIN");

        vinInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        locationCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        locationCreateLabel.setText("Location");

        locationInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        confirmVehicleCreation.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        confirmVehicleCreation.setText("Create Vehicle");
        confirmVehicleCreation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmVehicleCreationActionPerformed(evt);
            }
        });

        yearCreateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        yearCreateLabel.setText("Year");

        yearInput.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N

        cancelVehicleCreation.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        cancelVehicleCreation.setText("Cancel");
        cancelVehicleCreation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelVehicleCreationActionPerformed(evt);
            }
        });

        creationErrorLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        creationErrorLabel.setForeground(new java.awt.Color(255, 51, 51));
        creationErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        creationErrorLabel.setText("jLabel4");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vehicleCreateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(creationErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vinCreateLabel)
                            .addComponent(locationCreateLabel)
                            .addComponent(priceCreateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vinInput, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(priceInput)
                            .addComponent(locationInput)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(conditionCreateLabel)
                            .addComponent(typeCreateLabel)
                            .addComponent(transmissionCreateLabel)
                            .addComponent(modelCreateLabel)
                            .addComponent(makeCreateLabel)
                            .addComponent(kilometreCreateLabel)
                            .addComponent(yearCreateLabel))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(conditionInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(typeInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transmissionInput, 0, 170, Short.MAX_VALUE)
                            .addComponent(modelInput)
                            .addComponent(makeInput)
                            .addComponent(kilometreInput)
                            .addComponent(yearInput))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(confirmVehicleCreation, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelVehicleCreation, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(vehicleCreateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(conditionCreateLabel)
                    .addComponent(conditionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeCreateLabel)
                    .addComponent(typeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transmissionCreateLabel)
                    .addComponent(transmissionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelCreateLabel)
                    .addComponent(modelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(makeCreateLabel)
                    .addComponent(makeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kilometreCreateLabel)
                    .addComponent(kilometreInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearCreateLabel)
                    .addComponent(yearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceCreateLabel)
                    .addComponent(priceInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vinCreateLabel)
                    .addComponent(vinInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationCreateLabel)
                    .addComponent(locationInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmVehicleCreation)
                    .addComponent(cancelVehicleCreation, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(creationErrorLabel)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout vehicleCreationPanelLayout = new javax.swing.GroupLayout(vehicleCreationPanel);
        vehicleCreationPanel.setLayout(vehicleCreationPanelLayout);
        vehicleCreationPanelLayout.setHorizontalGroup(
            vehicleCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vehicleCreationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(235, 235, 235))
        );
        vehicleCreationPanelLayout.setVerticalGroup(
            vehicleCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehicleCreationPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout generalPanelLayout = new javax.swing.GroupLayout(generalPanel);
        generalPanel.setLayout(generalPanelLayout);
        generalPanelLayout.setHorizontalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vehicleSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(vehicleCreationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 895, Short.MAX_VALUE)
        );
        generalPanelLayout.setVerticalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPanelLayout.createSequentialGroup()
                .addComponent(vehicleSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vehicleCreationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        parentPanel.add(generalPanel, "card3");

        getContentPane().add(parentPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void adminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminButtonActionPerformed

        // Set title text to appropriate screen.
        SubTitleLabel.setText("Inventory Management");
        
        // Switch to inventory mangement screen. 
        parentPanel.removeAll();
        parentPanel.add(inventoryManagementPanel1);
        parentPanel.repaint();
        parentPanel.revalidate();
        homeButton.setVisible(true);
        adminButton.setVisible(false);

        // List all cars when switching panels. 
        inventoryOutput.setText("");
        for (car c : cars) {
            inventoryOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n");
        }
        
        // If no cars are enterred, let the user know.
        if (inventoryOutput.getText().isEmpty())
        {
            inventoryOutput.setText("No Car Data Available.");
        }

    }//GEN-LAST:event_adminButtonActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed

        SubTitleLabel.setText("Vehicle Search");

        // Switch to vehicle search screen. 
        parentPanel.removeAll();
        parentPanel.add(vehicleSearchPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        adminButton.setVisible(true);
        homeButton.setVisible(false);

        // Adds model to the modleList ArrayList. 
        cars.forEach((p) -> {
            ModelList.add(p.model);
        });

        // Removes duplicates 
        Set<String> set = new HashSet<>(ModelList);
        ModelList.clear();
        ModelList.addAll(set);

        // Converts to array so it can be added to the combobox. 
        Object[] ModelListAsArray = ModelList.toArray();

        // Adds to combobox. 
        DefaultComboBoxModel mod = new DefaultComboBoxModel(ModelListAsArray);
        modelComboBox.setModel(mod);

        // Adds make to the MakesList ArrayList
        cars.forEach((p) -> {
            MakeList.add(p.make);
        });

        // Removes duplicates 
        Set<String> set2 = new HashSet<>(MakeList);
        MakeList.clear();
        MakeList.addAll(set);

        // Converts to array so it can be added to the combobox.
        Object[] MakeListAsArray = MakeList.toArray();

        // Adds to combobox.
        mod = new DefaultComboBoxModel(MakeListAsArray);
        makeComboBox.setModel(mod);

        // Displays all cars when switching screens. 
        searchOutput.setText("");
        for (car c : cars) {
            searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n");
        }
        
        if (searchOutput.getText().isEmpty())
        {
            searchOutput.setText("No Car Data Available.");
        }
    }//GEN-LAST:event_homeButtonActionPerformed

    private void addVehicleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVehicleButtonActionPerformed
        // Switch the vehicle creation screen.
        edit = false;
        confirmVehicleCreation.setText("Create Vehicle");

        parentPanel.removeAll();
        parentPanel.add(vehicleCreationPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        adminButton.setVisible(false);
        homeButton.setVisible(false);
    }//GEN-LAST:event_addVehicleButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // Required variables. 
        Boolean error = true;
        car i = null;
        Integer index;

        // Initialize selected variable, attempt to parse the input and tell the user if the input is incorrect.
        selected = -1;
        try {
            selected = Integer.parseInt(searchInput.getText());
        } catch (NumberFormatException e) {
            inventoryErrorLabel.setText("Please Enter a Valid Stock Number");
        }

        // If the stock number is found, there is no error. set i so it can be removed later.
        for (car c : cars) {
            if (c.stockNumber.equals(selected)) {
                error = false;
                i = c;
            }
        }

        // Grabs the index of the required car.
        index = cars.indexOf(i);

        if (error) {
            // Error message.
            inventoryErrorLabel.setText("Please Enter a Valid Stock Number");
        } else {
            // No error. 
            inventoryErrorLabel.setText("");

            // Popup menu to ask user to confirm the deletion of car object.
            int x = JOptionPane.showConfirmDialog(null, "Confirm Deletion of Car #" + selected, "Select an Option", JOptionPane.OK_CANCEL_OPTION);
            if (x == 2) {
                // Error if the user said 'cancel'
                error = true;
            }
        }

        // Removes the car if the user confirms.
        if (!error) {
            cars.remove(cars.get(index));
        }

        // Display the new list of cars. 
        inventoryOutput.setText("");
        for (car c : cars) {
            inventoryOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n");
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void cancelVehicleCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelVehicleCreationActionPerformed
        creationErrorLabel.setText("");

        // Return to admin screen and empty all fields. 
        conditionInput.setSelectedItem("New");
        typeInput.setSelectedItem("Car");
        transmissionInput.setSelectedItem("Manual");
        modelInput.setText("");
        makeInput.setText("");
        kilometreInput.setText("");
        yearInput.setText("");
        priceInput.setText("");
        vinInput.setText("");
        locationInput.setText("");

        parentPanel.removeAll();
        parentPanel.add(inventoryManagementPanel1);
        parentPanel.repaint();
        parentPanel.revalidate();
        homeButton.setVisible(true);
        adminButton.setVisible(false);
    }//GEN-LAST:event_cancelVehicleCreationActionPerformed

    private void confirmVehicleCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmVehicleCreationActionPerformed

        // Read from all the combo-boxes and text areas. 
        String condition, type, transmission, model, make, vin;
        Integer kilometres, year, price, location, stockNumber;
        Integer realYear = Calendar.getInstance().get(Calendar.YEAR) + 1;

        Boolean error = false;

        condition = (String) conditionInput.getSelectedItem();
        type = (String) typeInput.getSelectedItem();
        transmission = (String) transmissionInput.getSelectedItem();
        model = modelInput.getText();
        
        // Format Make and Model input. 
        model = model.substring(0, 1).toUpperCase() + model.substring(1).toLowerCase();
        make = makeInput.getText();
        make = make.substring(0, 1).toUpperCase() + make.substring(1).toLowerCase();
        
        vin = vinInput.getText();
        if (vinInput.getText().length() != 17)
        {
            error = true;
            creationErrorLabel.setText("Please Enter a Valid VIN");
        }
        /*
        These next statements just format and ensure proper data entry.
        Trys and Catches are used to ensure that all numeric values are entered as numeric.
        */
        kilometres = 0;
        try {
            kilometres = Integer.parseInt(kilometreInput.getText());
        } catch (NumberFormatException e) {
            creationErrorLabel.setText("Please Enter a Valid Kilometre Value");
            error = true;
        }

        year = 0;
        try {
            year = Integer.parseInt(yearInput.getText());
        } catch (NumberFormatException e) {
            creationErrorLabel.setText("Please Enter a Valid Year");
            error = true;
        }

        if (year > realYear | year < 1885) {
            creationErrorLabel.setText("Please Enter a Valid Year");
            error = true;
        }

        price = 0;
        try {
            price = Integer.parseInt(priceInput.getText());
        } catch (NumberFormatException e) {
            creationErrorLabel.setText("Please Enter a Valid Price");
            error = true;
        }

        location = 0;
        try {
            location = Integer.parseInt(locationInput.getText());
        } catch (NumberFormatException e) {
            creationErrorLabel.setText("Please Enter a Valid Location ID");
            error = true;
        }

        stockNumber = 0;
        if (!error) {
            creationErrorLabel.setText("");

            stock.clear();
            for (car c : cars) {
                stock.add(c.stockNumber);
            }

            int x = 0;
            while (1 == 1) {
                if (!stock.contains(x)) {
                    stockNumber = x;
                    break;
                }
                x++;
            }
        }

        // If user isn't a currently editing a car, make a new car with the entered data. 
        // If user is editing a car, change the selected car's values to the entered data.
        if (!error && !edit) {
            car Car = new car(condition, type, transmission, model, make, kilometres, year, price, vin, stockNumber, location);
            cars.add(Car);

            conditionInput.setSelectedItem("New");
            typeInput.setSelectedItem("Car");
            transmissionInput.setSelectedItem("Manual");
            modelInput.setText("");
            makeInput.setText("");
            kilometreInput.setText("");
            yearInput.setText("");
            priceInput.setText("");
            vinInput.setText("");
            locationInput.setText("");

            parentPanel.removeAll();
            parentPanel.add(inventoryManagementPanel1);
            parentPanel.repaint();
            parentPanel.revalidate();
            homeButton.setVisible(true);
            adminButton.setVisible(false);

            inventoryOutput.setText("");
            for (car c : cars) {
                inventoryOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n");
            } 
        } 
        else if (!error && edit) {
            cars.set(selected, new car(condition, type, transmission, model, make, kilometres, year, price, vin, cars.get(selected).stockNumber, location));

            conditionInput.setSelectedItem("New");
            typeInput.setSelectedItem("Car");
            transmissionInput.setSelectedItem("Manual");
            modelInput.setText("");
            makeInput.setText("");
            kilometreInput.setText("");
            yearInput.setText("");
            priceInput.setText("");
            vinInput.setText("");
            locationInput.setText("");

            parentPanel.removeAll();
            parentPanel.add(inventoryManagementPanel1);
            parentPanel.repaint();
            parentPanel.revalidate();
            homeButton.setVisible(true);
            adminButton.setVisible(false);

            inventoryOutput.setText("");
            for (car c : cars) {
                inventoryOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n");
            }
        }
    }//GEN-LAST:event_confirmVehicleCreationActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // Throw an error if something goes wrong. 
        Boolean error = true;

        // Make sure the enterred value is a number.
        selected = -1;
        try {
            selected = Integer.parseInt(searchInput.getText());
        } catch (NumberFormatException e) {
            inventoryErrorLabel.setText("Please Enter a Valid Stock Number");
        }

        // Cancel the error if the stock number is found. 
        for (car c : cars) {
            if (c.stockNumber.equals(selected)) {
                error = false;
            }
        }

        // If there were no valid stock number or non-numeric values were presented, let the user know.
        if (error) {
            inventoryErrorLabel.setText("Please Enter a Valid Stock Number");
        }

        // Switch to the creation screen and set the information to the selected car.
        if (!error) {
            inventoryErrorLabel.setText("");

            parentPanel.removeAll();
            parentPanel.add(vehicleCreationPanel);
            parentPanel.repaint();
            parentPanel.revalidate();
            adminButton.setVisible(false);
            homeButton.setVisible(false);
            confirmVehicleCreation.setText("Edit Vehicle");

            edit = true;

            conditionInput.setSelectedItem(cars.get(selected).condition);
            typeInput.setSelectedItem(cars.get(selected).vehicleType);
            transmissionInput.setSelectedItem(cars.get(selected).transmission);
            modelInput.setText(cars.get(selected).model);
            makeInput.setText(cars.get(selected).make);
            kilometreInput.setText(cars.get(selected).kilometers.toString());
            yearInput.setText(cars.get(selected).vehicleYear.toString());
            priceInput.setText(cars.get(selected).price.toString());
            vinInput.setText(cars.get(selected).VIN);
            locationInput.setText(cars.get(selected).locationID.toString());
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Adds Stock# to the Stock# ArrayList
        cars.forEach((p) -> {
            StockNumberList.add(p.stockNumber);
        });

        // If text fields are empty.
        if (searchInput.getText().isEmpty()) {

            // Error message. 
            inventoryOutput.setText("Blank search field.");

            //Puts focus back on searchInput text field for ease of user input. 
            searchInput.requestFocus();
        } else {

            // Clear output text.
            inventoryOutput.setText("");

            // Searches for the Stock#. 
            if (StockNumberList.contains(searchInput.getText())) {
                // Finds the index of the name if it exists. 
                int x = StockNumberList.indexOf((searchInput.getText()));

                // Temoporary output string. 
                String output = "";

                output = output + cars.get(x).condition + "\n"
                        + cars.get(x).vehicleType + "\n"
                        + cars.get(x).transmission + "\n"
                        + cars.get(x).model + "\n"
                        + cars.get(x).make + "\n"
                        + cars.get(x).kilometers + "\n"
                        + cars.get(x).vehicleYear + "\n"
                        + cars.get(x).price + "\n"
                        + cars.get(x).VIN + "\n"
                        + cars.get(x).stockNumber + "\n"
                        + cars.get(x).locationID + "\n";

                // Write output to the text area. 
                inventoryOutput.setText(output);

                // Puts focus back on text field for ease of user input.  
                searchInput.requestFocus();

                // Clear text boxes. 
                searchInput.setText("");

            } else {
                // No passenger found. 
                inventoryOutput.setText("Car not found.");

                //Puts focus back on first name text field for ease of user input. 
                searchInput.requestFocus();
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void selectedInventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedInventoryButtonActionPerformed
        //Throw an error if something goes wrong
        Boolean error = true;
        car i = null;

        //Confirm that the entered stock number is numeric
        selected = -1;
        try {
            selected = Integer.parseInt(searchInput.getText());
        } catch (NumberFormatException e) {
            inventoryErrorLabel.setText("Please Enter a Valid Stock Number");
        }

        // Cancel the error if the car exists and grab it if it does.
        for (car c : cars) {
            if (c.stockNumber.equals(selected)) {
                error = false;
                i = c;
            }
        }

        // If the value wasn't numeric or the stock number doesn't exist, tell the user.
        // If it works, confirm that they want to make a file for this car, then do it.
        if (error) {
            inventoryErrorLabel.setText("Please Enter a Valid Stock Number");
        } else {
            inventoryErrorLabel.setText("");

            int x = JOptionPane.showConfirmDialog(null, "Confirm File Creation for Car #" + selected, "Select an Option", JOptionPane.OK_CANCEL_OPTION);
            if (x == 2) {
                error = true;
            }
        }

        //Tell the user that the car file has been created successfully.
        if (!error && i != null) {
            ItemReport(i);
            JOptionPane.showMessageDialog(null, "Item Report Created Successfully", "Success", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_selectedInventoryButtonActionPerformed

    private void allInventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allInventoryButtonActionPerformed
        //If anything goes wrong, throw an error.
        Boolean error = false;
        inventoryErrorLabel.setText("");

        //If there are no cars, tell the user to add some.
        if (cars.isEmpty()) {
            error = true;
            int x = JOptionPane.showConfirmDialog(null, "Please Add Cars to Stock to Generate Report", "Error", JOptionPane.OK_OPTION);
        }

        // Make sure the user wants to create the full inventory file
        if (!error) {
            int x = JOptionPane.showConfirmDialog(null, "Confirm Full Inventory Report File Creation", "Select an Option", JOptionPane.OK_CANCEL_OPTION);
            if (x == 2) {
                error = true;
            }

        }
        // Create the file so long as the user confirmed.
        if (!error) {
            InventoryReport();
            JOptionPane.showMessageDialog(null, "Inventory Report Created Successfully", "Success", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_allInventoryButtonActionPerformed

    private void conditionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conditionSortActionPerformed
        typeSort.setSelected(false);
        modelSort.setSelected(false);
        makeSort.setSelected(false);
        transmissionSort.setSelected(false);
        kilometerSort.setSelected(false);
        yearSort.setSelected(false);
        priceSort.setSelected(false);
    }//GEN-LAST:event_conditionSortActionPerformed

    private void typeSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeSortActionPerformed
        conditionSort.setSelected(false);
        modelSort.setSelected(false);
        makeSort.setSelected(false);
        transmissionSort.setSelected(false);
        kilometerSort.setSelected(false);
        yearSort.setSelected(false);
        priceSort.setSelected(false);
    }//GEN-LAST:event_typeSortActionPerformed

    private void modelSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelSortActionPerformed
        conditionSort.setSelected(false);
        typeSort.setSelected(false);
        makeSort.setSelected(false);
        transmissionSort.setSelected(false);
        kilometerSort.setSelected(false);
        yearSort.setSelected(false);
        priceSort.setSelected(false);
    }//GEN-LAST:event_modelSortActionPerformed

    private void makeSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeSortActionPerformed
        conditionSort.setSelected(false);
        typeSort.setSelected(false);
        modelSort.setSelected(false);
        transmissionSort.setSelected(false);
        kilometerSort.setSelected(false);
        yearSort.setSelected(false);
        priceSort.setSelected(false);
    }//GEN-LAST:event_makeSortActionPerformed

    private void transmissionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transmissionSortActionPerformed
        conditionSort.setSelected(false);
        typeSort.setSelected(false);
        modelSort.setSelected(false);
        makeSort.setSelected(false);
        kilometerSort.setSelected(false);
        yearSort.setSelected(false);
        priceSort.setSelected(false);
    }//GEN-LAST:event_transmissionSortActionPerformed

    private void kilometerSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kilometerSortActionPerformed
        conditionSort.setSelected(false);
        typeSort.setSelected(false);
        modelSort.setSelected(false);
        makeSort.setSelected(false);
        transmissionSort.setSelected(false);
        yearSort.setSelected(false);
        priceSort.setSelected(false);
    }//GEN-LAST:event_kilometerSortActionPerformed

    private void yearSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearSortActionPerformed
        conditionSort.setSelected(false);
        typeSort.setSelected(false);
        modelSort.setSelected(false);
        makeSort.setSelected(false);
        transmissionSort.setSelected(false);
        kilometerSort.setSelected(false);
        priceSort.setSelected(false);
    }//GEN-LAST:event_yearSortActionPerformed

    private void priceSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSortActionPerformed
        conditionSort.setSelected(false);
        typeSort.setSelected(false);
        modelSort.setSelected(false);
        makeSort.setSelected(false);
        transmissionSort.setSelected(false);
        kilometerSort.setSelected(false);
        yearSort.setSelected(false);
    }//GEN-LAST:event_priceSortActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        //Clear all search fields
        conditionComboBox.setSelectedItem("");
        vehicleTypeComboBox.setSelectedItem("");
        modelComboBox.setSelectedItem("");
        makeComboBox.setSelectedItem("");
        transmissionComboBox.setSelectedItem("");
        kilometersMinInput.setText("from");
        kilometersMaxInput.setText("to");
        vehicleYearMinInput.setText("from");
        vehicleYearMaxInput.setText("to");
        priceRangeMinInput.setText("from");
        priceRangeMaxInput.setText("to");
        conditionSort.setSelected(false);
        typeSort.setSelected(false);
        modelSort.setSelected(false);
        makeSort.setSelected(false);
        transmissionSort.setSelected(false);
        kilometerSort.setSelected(false);
        yearSort.setSelected(false);
        priceSort.setSelected(false);

        searchOutput.setText("");
        for (car c : cars) {
            searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n");
        }
        
        if (searchOutput.getText().isEmpty())
        {
            searchOutput.setText("No Car Data Found.");
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void kilometersMinInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kilometersMinInputFocusGained
        if (kilometersMinInput.getText().equals("from")) {
            kilometersMinInput.setText("");
        }
    }//GEN-LAST:event_kilometersMinInputFocusGained

    private void kilometersMinInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kilometersMinInputFocusLost
        if (kilometersMinInput.getText().isEmpty()) {
            kilometersMinInput.setText("from");
        }
    }//GEN-LAST:event_kilometersMinInputFocusLost

    private void kilometersMaxInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kilometersMaxInputFocusGained
        if (kilometersMaxInput.getText().equals("to")) {
            kilometersMaxInput.setText("");
        }
    }//GEN-LAST:event_kilometersMaxInputFocusGained

    private void kilometersMaxInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kilometersMaxInputFocusLost
        if (kilometersMaxInput.getText().isEmpty()) {
            kilometersMaxInput.setText("to");
        }
    }//GEN-LAST:event_kilometersMaxInputFocusLost

    private void vehicleYearMinInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vehicleYearMinInputFocusGained
        if (vehicleYearMinInput.getText().equals("from")) {
            vehicleYearMinInput.setText("");
        }
    }//GEN-LAST:event_vehicleYearMinInputFocusGained

    private void vehicleYearMaxInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vehicleYearMaxInputFocusGained
        if (vehicleYearMaxInput.getText().equals("to")) {
            vehicleYearMaxInput.setText("");
        }
    }//GEN-LAST:event_vehicleYearMaxInputFocusGained

    private void vehicleYearMinInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vehicleYearMinInputFocusLost
        if (vehicleYearMinInput.getText().isEmpty()) {
            vehicleYearMinInput.setText("from");
        }
    }//GEN-LAST:event_vehicleYearMinInputFocusLost

    private void vehicleYearMaxInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vehicleYearMaxInputFocusLost
        if (vehicleYearMaxInput.getText().isEmpty()) {
            vehicleYearMaxInput.setText("to");
        }
    }//GEN-LAST:event_vehicleYearMaxInputFocusLost

    private void priceRangeMinInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceRangeMinInputFocusGained
        if (priceRangeMinInput.getText().equals("from")) {
            priceRangeMinInput.setText("");
        }
    }//GEN-LAST:event_priceRangeMinInputFocusGained

    private void priceRangeMinInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceRangeMinInputFocusLost
        if (priceRangeMinInput.getText().isEmpty()) {
            priceRangeMinInput.setText("from");
        }
    }//GEN-LAST:event_priceRangeMinInputFocusLost

    private void priceRangeMaxInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceRangeMaxInputFocusGained
        if (priceRangeMaxInput.getText().equals("to")) {
            priceRangeMaxInput.setText("");
        }
    }//GEN-LAST:event_priceRangeMaxInputFocusGained

    private void priceRangeMaxInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceRangeMaxInputFocusLost
        if (priceRangeMaxInput.getText().isEmpty()) {
            priceRangeMaxInput.setText("to");
        }
    }//GEN-LAST:event_priceRangeMaxInputFocusLost

    private void stockNumberSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockNumberSearchTextFieldActionPerformed

    }//GEN-LAST:event_stockNumberSearchTextFieldActionPerformed

    private void stockNumberSearchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockNumberSearchTextFieldFocusLost
        if (stockNumberSearchTextField.getText().isEmpty()) {
            stockNumberSearchTextField.setText("Stock #");
        }
    }//GEN-LAST:event_stockNumberSearchTextFieldFocusLost

    private void stockNumberSearchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockNumberSearchTextFieldFocusGained
        if (stockNumberSearchTextField.getText().equals("Stock #")) {
            stockNumberSearchTextField.setText("");
        }
    }//GEN-LAST:event_stockNumberSearchTextFieldFocusGained

    private void searchInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchInputFocusGained
        if (searchInput.getText().equals("Stock #")) {
            searchInput.setText("");
        }
    }//GEN-LAST:event_searchInputFocusGained

    private void searchInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchInputFocusLost
        if (searchInput.getText().isEmpty()) {
            searchInput.setText("Stock #");
        }
    }//GEN-LAST:event_searchInputFocusLost

    private void searchOneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOneButtonActionPerformed
        searchOutput.setText("");

        // Create and Initialize all variables
        Boolean error = false;
        int minkm, maxkm, minyear, maxyear, minprice, maxprice;
        minkm = 0;
        maxkm = 0;
        minyear = 0;
        maxyear = 0;
        minprice = 0;
        maxprice = 0;

        // Make sure all required values are properly enterred.
        if (conditionSort.isSelected()) {
            if (conditionComboBox.getSelectedItem().equals("")) {
                error = true;
                searchOutput.setText("Please Select a Valid Condition, or press 'Clear' to View All Vehicles.");
            }
        } else if (typeSort.isSelected()) {
            if (vehicleTypeComboBox.getSelectedItem().equals("")) {
                error = true;
                searchOutput.setText("Please Select a Valid Vehicle Type, or Press 'Clear' to View All Vehicles.");
            }
        } else if (modelSort.isSelected()) {
            if (modelComboBox.getSelectedItem().equals("")) {
                error = true;
                searchOutput.setText("Please Select a Valid Vehicle Model, or Press 'Clear' to View All Vehicles.");
            }
        } else if (makeSort.isSelected()) {
            if (makeComboBox.getSelectedItem().equals("")) {
                error = true;
                searchOutput.setText("Please Select a Valid Vehicle Make, or Press 'Clear' to View All Vehicles.");
            }
        } else if (transmissionSort.isSelected()) {
            if (transmissionComboBox.getSelectedItem().equals("")) {
                error = true;
                searchOutput.setText("Please Select a Valid Transmission Type, or Press 'Clear' to View All Vehicles.");
            }
        } else if (kilometerSort.isSelected()) {
            try {
                minkm = Integer.parseInt(kilometersMinInput.getText());
                maxkm = Integer.parseInt(kilometersMaxInput.getText());
            } catch (NumberFormatException e) {
                error = true;
                searchOutput.setText("Please Enter Valid Kilometer Values, or Press 'Clear' to View All Vehicles.");
            }

            if (minkm > maxkm) {
                error = true;
                searchOutput.setText("Please Enter Valid Kilometer Values, or Press 'Clear' to View All Vehicles.");
            }
        } else if (yearSort.isSelected()) {
            try {
                minyear = Integer.parseInt(vehicleYearMinInput.getText());
                maxyear = Integer.parseInt(vehicleYearMaxInput.getText());
            } catch (NumberFormatException e) {
                error = true;
                searchOutput.setText("Please Enter Valid Year Values, or Press 'Clear' to View All Vehicles.");
            }

            if (minyear > maxyear) {
                error = true;
                searchOutput.setText("Please Enter Valid Year Values, or Press 'Clear' to View All Vehicles.");
            }
        } else if (priceSort.isSelected()) {
            try {
                minprice = Integer.parseInt(priceRangeMinInput.getText());
                maxprice = Integer.parseInt(priceRangeMaxInput.getText());
            } catch (NumberFormatException e) {
                error = true;
                searchOutput.setText("Please Enter Valid Price Values, or Press 'Clear' to View All Vehicles.");
            }

            if (minprice > maxprice) {
                error = true;
                searchOutput.setText("Please Enter Valid Price Values, or Press 'Clear' to View All Vehicles.");
            }
        } else {
            error = true;
            searchOutput.setText("Please Select a Search Parameter, or Press 'Clear' to View All Vehicles.");
        }

        // Continue if the required values are enterred
        /*
        Depending on what the user is trying to sort by, the program finds all the cars
        that match the specified data and appends them to the search output text area.
        */
        if (!error) {
            if (conditionSort.isSelected()) {
                for (car c : cars) {
                    if (c.condition.equals(conditionComboBox.getSelectedItem())) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            } else if (typeSort.isSelected()) {
                for (car c : cars) {
                    if (c.vehicleType.equals(conditionComboBox.getSelectedItem())) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            } else if (modelSort.isSelected()) {
                for (car c : cars) {
                    if (c.model.equals(modelComboBox.getSelectedItem())) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            } else if (makeSort.isSelected()) {
                for (car c : cars) {
                    if (c.make.equals(makeComboBox.getSelectedItem())) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            } else if (transmissionSort.isSelected()) {
                for (car c : cars) {
                    if (c.transmission.equals(transmissionComboBox.getSelectedItem())) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            } else if (kilometerSort.isSelected()) {
                for (car c : cars) {
                    if (c.kilometers >= minkm && c.kilometers <= maxkm) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            } else if (yearSort.isSelected()) {
                for (car c : cars) {
                    if (c.vehicleYear <= minyear && c.vehicleYear >= maxyear) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            } else if (priceSort.isSelected()) {
                for (car c : cars) {
                    if (c.price >= minprice && c.price < maxprice) {
                        searchOutput.append(c.vehicleYear + " " +  c.model + " " +  c.make + "\n" 
                    + "Condition: " + c.condition + "\n"
                    + "Vehicle Type: " + c.vehicleType + "\n"
                    + "Transmission: " + c.transmission + "\n"
                    + "Kilometers: " + c.kilometers + "\n"
                    + "Price: $" + c.price + "\n\n");
                    }
                }
            }

            if (cars.isEmpty()) {
                searchOutput.setText("No Car Data Available.");
            }

            if (searchOutput.getText().equals("")) {
                searchOutput.setText("No Cars Match Your Current Search Paramters.");
            }
        }
    }//GEN-LAST:event_searchOneButtonActionPerformed

    private void searchTwoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTwoButtonActionPerformed
        // Adds Stock# to the Stock# ArrayList
        cars.forEach((p) -> {
            StockNumberList.add(p.stockNumber);
        });

        // If text fields are empty.
        if (stockNumberSearchTextField.getText().isEmpty()) {

            // Error message. 
            searchOutput.setText("Blank search field.");

            //Puts focus back on searchInput text field for ease of user input. 
            stockNumberSearchTextField.requestFocus();
        } else {

            // Clear output text.
            searchOutput.setText("");

            // Searches for the Stock#. 
            if (StockNumberList.contains(searchInput.getText())) {
                // Finds the index of the name if it exists. 
                int x = StockNumberList.indexOf((searchInput.getText()));

                // Temoporary output string. 
                String output = "";

                output = output + cars.get(x).condition + "\n"
                        + cars.get(x).vehicleType + "\n"
                        + cars.get(x).transmission + "\n"
                        + cars.get(x).model + "\n"
                        + cars.get(x).make + "\n"
                        + cars.get(x).kilometers + "\n"
                        + cars.get(x).vehicleYear + "\n"
                        + cars.get(x).price + "\n"
                        + cars.get(x).VIN + "\n"
                        + cars.get(x).stockNumber + "\n"
                        + cars.get(x).locationID + "\n";

                // Write output to the text area. 
                searchOutput.setText(output);

                // Puts focus back on text field for ease of user input.  
                stockNumberSearchTextField.requestFocus();

                // Clear text boxes. 
                stockNumberSearchTextField.setText("");

            } else {
                // No passenger found. 
                searchOutput.setText("Car not found.");

                //Puts focus back on first name text field for ease of user input. 
                stockNumberSearchTextField.requestFocus();
            }
        }        
    }//GEN-LAST:event_searchTwoButtonActionPerformed

    class car {

        String condition, vehicleType, transmission, model, make, VIN;
        Integer locationID, price, kilometers, vehicleYear, stockNumber;

        car(String _condition, String _vehicleType, String _transmission,
                String _model, String _make, Integer _kilometers,
                Integer _vehicleYear, Integer _price, String _VIN, Integer _stockNumber,
                Integer _locationID) {

            condition = _condition;
            vehicleType = _vehicleType;
            transmission = _transmission;
            model = _model;
            make = _make;
            kilometers = _kilometers;
            vehicleYear = _vehicleYear;
            price = _price;
            VIN = _VIN;
            stockNumber = _stockNumber;
            locationID = _locationID;
        }
    }

    private void ItemReport(car c) {
        // Creates an xml file for the specified car.
        DocumentBuilder docBuilder = null;
        String file = c.stockNumber + c.make;

        try {
            docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();

            Document d = docBuilder.newDocument();

            Element root = d.createElement("car");

            root.setAttribute("condition", c.condition);
            root.setAttribute("vehicleType", c.vehicleType);
            root.setAttribute("transmission", c.transmission);
            root.setAttribute("model", c.model);
            root.setAttribute("make", c.make);
            root.setAttribute("kilometers", c.kilometers.toString());
            root.setAttribute("vehicleYear", c.vehicleYear.toString());
            root.setAttribute("price", c.price.toString());
            root.setAttribute("VIN", c.VIN);
            root.setAttribute("locationID", c.locationID.toString());

            d.appendChild(root);

            Transformer t = TransformerFactory.newInstance().newTransformer();
            DOMSource ds = new DOMSource(d);
            StreamResult sr = new StreamResult(new File(file));
            t.transform(ds, sr);
        } catch (Exception err) {
            err.printStackTrace();
        }
    }

    private void InventoryReport() {
        // Creates an xml for every car currenlty entered in the program.
        DocumentBuilder docBuilder = null;
        String file = "InventoryReport";

        try {
            docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();

            Document d = docBuilder.newDocument();

            Element root = d.createElement("inventory");

            for (car c : cars) {
                Element car = d.createElement("car");
                car.setAttribute("condition", c.condition);
                car.setAttribute("vehicleType", c.vehicleType);
                car.setAttribute("transmission", c.transmission);
                car.setAttribute("model", c.model);
                car.setAttribute("make", c.make);
                car.setAttribute("kilometers", c.kilometers.toString());
                car.setAttribute("vehicleYear", c.vehicleYear.toString());
                car.setAttribute("price", c.price.toString());
                car.setAttribute("VIN", c.VIN);
                car.setAttribute("locationID", c.locationID.toString());
                root.appendChild(car);
            }
            d.appendChild(root);

            Transformer t = TransformerFactory.newInstance().newTransformer();
            DOMSource ds = new DOMSource(d);
            StreamResult sr = new StreamResult(new File(file));
            t.transform(ds, sr);
        } catch (Exception err) {
            err.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AutoOrganizerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AutoOrganizerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AutoOrganizerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AutoOrganizerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AutoOrganizerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel OptionsPanel;
    private javax.swing.JLabel SubTitleLabel;
    private javax.swing.JPanel TitlePanel;
    private javax.swing.JButton addVehicleButton;
    private javax.swing.JButton adminButton;
    private javax.swing.JButton allInventoryButton;
    private javax.swing.JButton cancelVehicleCreation;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> conditionComboBox;
    private javax.swing.JLabel conditionCreateLabel;
    private javax.swing.JComboBox<String> conditionInput;
    private javax.swing.JRadioButton conditionSort;
    private javax.swing.JButton confirmVehicleCreation;
    private javax.swing.JLabel creationErrorLabel;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel inventoryErrorLabel;
    private javax.swing.JPanel inventoryManagementPanel1;
    private javax.swing.JTextArea inventoryOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JRadioButton kilometerSort;
    private javax.swing.JLabel kilometersLabel;
    private javax.swing.JTextField kilometersMaxInput;
    private javax.swing.JTextField kilometersMinInput;
    private javax.swing.JLabel kilometreCreateLabel;
    private javax.swing.JTextField kilometreInput;
    private javax.swing.JLabel locationCreateLabel;
    private javax.swing.JTextField locationInput;
    private javax.swing.JComboBox<String> makeComboBox;
    private javax.swing.JLabel makeCreateLabel;
    private javax.swing.JTextField makeInput;
    private javax.swing.JRadioButton makeSort;
    private javax.swing.JComboBox<String> modelComboBox;
    private javax.swing.JLabel modelCreateLabel;
    private javax.swing.JTextField modelInput;
    private javax.swing.JRadioButton modelSort;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JLabel priceCreateLabel;
    private javax.swing.JTextField priceInput;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceRangeMaxInput;
    private javax.swing.JTextField priceRangeMinInput;
    private javax.swing.JRadioButton priceSort;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchInput;
    private javax.swing.JPanel searchInventoryPanel;
    private javax.swing.JButton searchOneButton;
    private javax.swing.JTextArea searchOutput;
    private javax.swing.JButton searchTwoButton;
    private javax.swing.JButton selectedInventoryButton;
    private javax.swing.JTextField stockNumberSearchTextField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox<String> transmissionComboBox;
    private javax.swing.JLabel transmissionCreateLabel;
    private javax.swing.JComboBox<String> transmissionInput;
    private javax.swing.JRadioButton transmissionSort;
    private javax.swing.JLabel typeCreateLabel;
    private javax.swing.JComboBox<String> typeInput;
    private javax.swing.JRadioButton typeSort;
    private javax.swing.JLabel vehicleCreateLabel;
    private javax.swing.JPanel vehicleCreationPanel;
    private javax.swing.JPanel vehicleSearchPanel;
    private javax.swing.JComboBox<String> vehicleTypeComboBox;
    private javax.swing.JTextField vehicleYearMaxInput;
    private javax.swing.JTextField vehicleYearMinInput;
    private javax.swing.JLabel vinCreateLabel;
    private javax.swing.JTextField vinInput;
    private javax.swing.JLabel yearCreateLabel;
    private javax.swing.JTextField yearInput;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JRadioButton yearSort;
    // End of variables declaration//GEN-END:variables
}
